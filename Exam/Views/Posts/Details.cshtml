@model Exam.Models.Post


@{
    ViewBag.Title = "Details";
}

<h2>Details</h2>

<div>
    <h4>Post</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>
            @Html.DisplayNameFor(model => model.Title)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Title)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Content)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Content)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.AuthorID)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.AuthorID)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Published)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Published)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Expiry)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Expiry)
        </dd>

        <dt>
            @Html.DisplayNameFor(model => model.Imagefilename)
        </dt>

        <dd>
            @Html.DisplayFor(model => model.Imagefilename)
        </dd>

    </dl>
</div>
<p>
    @Html.ActionLink("Edit", "Edit", new { id = Model.PostId }) |
    @Html.ActionLink("Back to List", "Index")
</p>

<!-- outputting comments -->
<!-- we need to add this model in somehow: (at)model IEnumerable<Exam.Models.Comment this requires a view bag or model view or something.>-->

	<tr>
		<td>
			@Html.DisplayFor(modelItem => item.Content) <!-- Simply pointing these to model wont work as its the wrong model!-->
		</td>
		<td>
			@Html.DisplayFor(modelItem => item.AuthorID)
		</td>
		<td>
			@Html.DisplayFor(modelItem => item.Published)
		</td>
	</tr>



<!-- Creating comments -->
@using (Html.BeginForm("CreateComment", "Posts", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
		<div class="container">
			@Html.HiddenFor(model => model.PostId)
			@Html.EditorFor(model => model.Content) <!-- add styling tags here -->
		<!--	<input type="text" id="message" name="content" />-->
			<input type="submit" id="sendmessage" value="CreateComment" />
			<input type="hidden" id="displayname" />
			<ul id="discussion"></ul>
		</div>
}

<!--Script references. -->
<!--Reference the jQuery library. -->
<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<!--Reference the SignalR library. -->
<script src="~/Scripts/jquery.signalR-2.2.2.min.js"></script>
<!--Reference the autogenerated SignalR hub script. -->
<script src="~/signalr/hubs"></script>
<!--Add script to update the page and send messages.-->
<script type="text/javascript">
        $(function () {
            // Declare a proxy to reference the hub.
            var chat = $.connection.chatHub;
            // Create a function that the hub can call to broadcast messages.
            chat.client.broadcastMessage = function (name, message) {
                // Html encode display name and message.
                var encodedName = $('<div />').text(name).html();
                var encodedMsg = $('<div />').text(message).html();
                // Add the message to the page.
                $('#discussion').append('<li><strong>' + encodedName
                    + '</strong>:&nbsp;&nbsp;' + encodedMsg + '</li>');
            };
            // Get the user name and store it to prepend to messages.
            $('#displayname').val(prompt('Enter your name:', ''));
            // Set initial focus to message input box.
            $('#message').focus();
            // Start the connection.
            $.connection.hub.start().done(function () {
                $('#sendmessage').click(function () {
                    // Call the Send method on the hub.
                    chat.server.send($('#displayname').val(), $('#message').val());
                    // Clear text box and reset focus for next comment.
                    $('#message').val('').focus();
                });
            });
        });
</script>